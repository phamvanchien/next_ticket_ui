import MainLayout from "@/app/main";
import ErrorPage from "@/common/layouts/ErrorPage";
import { APP_CONFIG } from "@/config/app.config";
import { API_CODE, API_METHOD_ENUM } from "@/enums/api.enum";
import { ResponseProjectItemType } from "@/types/project.type";
import TaskPageView from "@/views/task/TaskPageView";
import { cookies } from "next/headers";
import React, { Suspense, use } from "react";
import '../../../../css/pages/task.css';
import { catchError, responseError } from "@/services/base.service";
import { Metadata } from "next";
import { APP_AUTH } from "@/enums/app.enum";

interface ProjectBoardProps {
  params: {
    id: number,
    project_id: number
  }
}

export const metadata: Metadata = {
  title: "Next Ticket | Projects",
  description: "Generated by Pham Van Chien - phamvanchien3605@gmail.com - Projects",
};

const ProjectBoard: React.FC<ProjectBoardProps> = ({ params }) => {
  const project = use(fetchProject(params.id, params.project_id));
  if (!project || project.code !== API_CODE.OK) {
    return <ErrorPage errorCode={project.code} />
  }

  return <MainLayout workspace={project.data.workspace}>
    <Suspense>
      <TaskPageView project={project.data} />
    </Suspense>
  </MainLayout>
}

const fetchProject = async (workspaceId: number, projectId: number): Promise<ResponseProjectItemType> => {
  try {
    const apiResponse = await fetch(APP_CONFIG.API.URL + APP_CONFIG.API.PREFIX.project.url + '/' + workspaceId.toString() + '/' + projectId.toString(), {
      method: API_METHOD_ENUM.GET,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${cookies().get(APP_AUTH.COOKIE_AUTH_KEY)?.value}`
      }
    });
  
    return await apiResponse.json();
  } catch (error) {
    const errorRes = responseError(500);
    errorRes.error = catchError();
    return errorRes;
  }
};

export default ProjectBoard;